//SpreadSheet AppScript
// 1. Enter sheet name where data is to be written below
 var SHEET_NAME = "screening"; //Spreadsheet sheets name

// 2. Enter the KEY of your form
var KEY = "1UGrdvgsrl19GuKtJIdymY4yQ6V2q70h-gExmHOc4r6k" //Spreadsheet unique key

// 3. Run > setup

// 4. Publish > Deploy as web app 
// - enter Project Version name and click 'Save New Version' 
// - set security level and enable service (most likely execute as 'me' and access 'anyone, even anonymously)

// 5. Copy the 'Current web app URL' and post this in your form/script action

// 6. Insert column names on your destination sheet matching the parameter names of the data you are passing in (exactly matching case)

var SCRIPT_PROP = PropertiesService.getScriptProperties(); // new property service

// If you don't want to expose either GET or POST methods you can comment out the appropriate function

function doGet(e){
 return handleResponse(e);
}
 function doPost(e){
 return handleResponse(e);
}

function handleResponse(e) {
 // shortly after my original solution Google announced the LockService[1]
 // this prevents concurrent access overwritting data
 // [1] http://googleappsdeveloper.blogspot.co.uk/2011/10/concurrency-and-google-apps-script.html
 // we want a public lock, one that locks for all invocations
 var lock = LockService.getPublicLock();
 lock.waitLock(30000); // wait 30 seconds before conceding defeat.

 try {
 // next set where we write the data - you could write to multiple/alternate destinations
 var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty(KEY));
 var sheet = doc.getSheetByName(SHEET_NAME);

 // we'll assume header is in row 1 but you can override with header_row in GET/POST data
 var headRow = e.parameter.header_row || 1;
 var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
 var nextRow = sheet.getLastRow()+1; // get next row
 var row = []; 
 // loop through the header columns
 for (i in headers){
 if (headers[i] == "Timestamp"){ // special case if you include a 'Timestamp' column
 row.push(new Date());
 } else { // else use header name to get data
 row.push(e.parameter[headers[i]]);
 }
 }
 // more efficient to set values as [][] array than individually
 sheet.getRange(nextRow, 1, 1, row.length).setValues([row]);
 // return json success results
 return ContentService
 .createTextOutput(JSON.stringify({"result":"success", "row": nextRow}))
 .setMimeType(ContentService.MimeType.JSON);
 } catch(e){
 // if error return this
 return ContentService
 .createTextOutput(JSON.stringify({"result":"error", "error": e})) .setMimeType(ContentService.MimeType.JSON);
 } finally { //release lock
 lock.releaseLock();
 }
}

function setup() {
 var doc = SpreadsheetApp.getActiveSpreadsheet();
 SCRIPT_PROP.setProperty(KEY, doc.getId());
}

//Articulate Storyline 3 Trigger //Insert in the last slide of each sequence
//Trigger1 //jQuery
var head = document.getElementsByTagName('head')[0];
var script = document.createElement('script');
script.src = '//code.jquery.com/jquery-1.11.0.min.js';
script.type = 'text/javascript';
head.appendChild(script)

//Trigger2 //Setting Variables to export
var player = GetPlayer();
 
//PLACE YOUR WEB APP URL
WEB_APP_URL = "Current web app URL"; //spreadsheet app web link
 
// STORE ARTICULATE STORYLINE VARIABLES
// "Columnname_Google_Spreadsheet" : player.GetVar("Name_Storyline_Variable")
// ATTENTION: Use a comma if you use multiple Storyline variables
storyline =
{
 "date" : new Date().toJSON().slice(0,10), //STORE DATE
 "name" : player.GetVar("name"),
 "email" : player.GetVar("email"),
 "message" : player.GetVar("message")
}

//Trigger3 //Exporting to spreadsheet
//DELAY SO JQUERY LIBRARY IS LOADED
setTimeout(function (){
 
//Export to Google
$.ajax({
url: WEB_APP_URL,
type: "POST",
data : storyline,
success: function(data)
{
console.log(data);
},
error: function(err) {
console.log('Error:', err);
}
});
return false;
}, 1000);
